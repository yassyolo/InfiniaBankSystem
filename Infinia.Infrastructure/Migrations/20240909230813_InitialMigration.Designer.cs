// <auto-generated />
using System;
using Infinia.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infinia.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240909230813_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Account identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Account balance");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Account creation date");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("customer account identifier");

                    b.Property<byte[]>("EncryptedIBAN")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasComment("Account number");

                    b.Property<decimal>("MonthlyFee")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Account monthly fee");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Account name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Account status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Account type");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Accounts");

                    b.HasComment("Account entity");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Address identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("City name");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Country name");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Postal or zip code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Street address, including house number");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasComment("Address entity");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasComment("Customer address identifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("IdentityCardId")
                        .HasColumnType("int")
                        .HasComment("Customer identity card identifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Customer name from identity card");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("IdentityCardId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("Customer entity");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Education identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Education level");

                    b.HasKey("Id");

                    b.ToTable("Educations");

                    b.HasComment("Education entity");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.EmployerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Employer information identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmployerName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Employer name");

                    b.Property<bool>("IsRetired")
                        .HasColumnType("bit")
                        .HasComment("Is the person retired");

                    b.Property<int>("MonthsAtJob")
                        .HasColumnType("int")
                        .HasComment("Months at job");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Position");

                    b.Property<int>("TotalWorkExperienceMonths")
                        .HasColumnType("int")
                        .HasComment("Total work experience months");

                    b.Property<int>("TotalWorkExperienceYears")
                        .HasColumnType("int")
                        .HasComment("Total work experience years");

                    b.Property<int>("YearsAtJob")
                        .HasColumnType("int")
                        .HasComment("Years at job");

                    b.HasKey("Id");

                    b.ToTable("EmployerInfos");

                    b.HasComment("Employer information entity");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.HouselholdInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Household information identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Dependents")
                        .HasColumnType("int")
                        .HasComment("Number of dependents that depend on the income of the applicant");

                    b.Property<int>("FamilyMembersCount")
                        .HasColumnType("int")
                        .HasComment("Number of family members");

                    b.Property<int>("MembersWithProvenIncome")
                        .HasColumnType("int")
                        .HasComment("Number of household members with proven income");

                    b.Property<int>("NumberOfHouseholdMembers")
                        .HasColumnType("int")
                        .HasComment("Number of household members");

                    b.HasKey("Id");

                    b.ToTable("HouselholdInfos");

                    b.HasComment("Household information entity");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.IdentityCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identity card identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("EncryptedCardNumber")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasComment("Identity card number");

                    b.Property<byte[]>("EncryptedDateOfIssue")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasComment("Identity card date of issue");

                    b.Property<byte[]>("EncryptedIssuer")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasComment("Identity card issuer");

                    b.Property<byte[]>("EncryptedNationality")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasComment("Identity card nationality");

                    b.Property<byte[]>("EncryptedSex")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasComment("Identity card sex");

                    b.HasKey("Id");

                    b.ToTable("IdentityCards");

                    b.HasComment("Identity card entity");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.IncomeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Income information identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("BusinessIncome")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Business income");

                    b.Property<decimal>("CivilContractIncome")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Civil contract income");

                    b.Property<decimal>("FixedMonthlyExpenses")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Fixed monthly expenses");

                    b.Property<decimal>("FreelanceIncome")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Freelance income");

                    b.Property<bool>("HasOtherCredits")
                        .HasColumnType("bit")
                        .HasComment("Has other credits");

                    b.Property<decimal>("NetMonthlyIncome")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Net monthly income");

                    b.Property<decimal>("OtherIncome")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Other income");

                    b.Property<decimal>("PensionIncome")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Pension income");

                    b.Property<decimal>("PermanentContractIncome")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Permanent contract income");

                    b.Property<decimal>("TemporaryContractIncome")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Temporary contract income");

                    b.HasKey("Id");

                    b.ToTable("IncomeInfos");

                    b.HasComment("Income information entity");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.LoanApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Loan application identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasComment("Loan application account identifier");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Loan application date");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Loan application customer identifier");

                    b.Property<int>("EducationId")
                        .HasColumnType("int")
                        .HasComment("Education identifier");

                    b.Property<int>("EmployerInfoId")
                        .HasColumnType("int")
                        .HasComment("Employer information identifier");

                    b.Property<int>("HouseholdInfoId")
                        .HasColumnType("int")
                        .HasComment("Household information identifier");

                    b.Property<int>("IncomeInfoId")
                        .HasColumnType("int")
                        .HasComment("Income information identifier");

                    b.Property<double>("InterestRate")
                        .HasColumnType("float")
                        .HasComment("Interest rate");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Loan amount");

                    b.Property<int>("LoanTermMonths")
                        .HasColumnType("int")
                        .HasComment("Loan term in months");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("int")
                        .HasComment("Marital status identifier");

                    b.Property<int>("PropertyStatusId")
                        .HasColumnType("int")
                        .HasComment("Property status identifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Loan application status");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EducationId");

                    b.HasIndex("EmployerInfoId");

                    b.HasIndex("HouseholdInfoId");

                    b.HasIndex("IncomeInfoId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("PropertyStatusId");

                    b.ToTable("LoanApplications");

                    b.HasComment("Loan application entity");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Marital status identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Marital status");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses");

                    b.HasComment("Marital status entity");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.PropertyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Property status identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("HasApartmentOrHouse")
                        .HasColumnType("bit")
                        .HasComment("Has apartment or house");

                    b.Property<bool>("HasCommercialProperty")
                        .HasColumnType("bit")
                        .HasComment("Has commercial property");

                    b.Property<bool>("HasLand")
                        .HasColumnType("bit")
                        .HasComment("Has land");

                    b.Property<bool>("HasMultipleProperties")
                        .HasColumnType("bit")
                        .HasComment("Has multiple properties");

                    b.Property<bool>("HasPartialOwnership")
                        .HasColumnType("bit")
                        .HasComment("Has partial ownership");

                    b.Property<int>("MonthsInResidence")
                        .HasColumnType("int")
                        .HasComment("Months in residence");

                    b.Property<bool>("NoProperty")
                        .HasColumnType("bit")
                        .HasComment("No property");

                    b.Property<string>("ResidenceStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Residence status");

                    b.Property<int>("VehicleCount")
                        .HasColumnType("int")
                        .HasComment("Vehicle count");

                    b.Property<int>("YearsInResidence")
                        .HasColumnType("int")
                        .HasComment("Years in residence");

                    b.HasKey("Id");

                    b.ToTable("PropertyStatuses");

                    b.HasComment("Property status entity");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Transaction identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasComment("Transaction account identifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Transaction amount");

                    b.Property<string>("Bic")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Transaction BIC");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Transaction description");

                    b.Property<byte[]>("EncryptedReceiverIBAN")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasComment("IBAN of the receiver");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Transaction fee");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Transaction reason");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Full name of the receiver of the transaction");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2")
                        .HasComment("Transaction date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Transaction type");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Transactions");

                    b.HasComment("Transaction entity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.Account", b =>
                {
                    b.HasOne("Infinia.Infrastructure.Data.DataModels.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.Customer", b =>
                {
                    b.HasOne("Infinia.Infrastructure.Data.DataModels.Address", "Address")
                        .WithMany("Customers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infinia.Infrastructure.Data.DataModels.IdentityCard", "IdentityCard")
                        .WithOne()
                        .HasForeignKey("Infinia.Infrastructure.Data.DataModels.Customer", "IdentityCardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("IdentityCard");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.LoanApplication", b =>
                {
                    b.HasOne("Infinia.Infrastructure.Data.DataModels.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infinia.Infrastructure.Data.DataModels.Customer", "Customer")
                        .WithMany("LoanApplications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infinia.Infrastructure.Data.DataModels.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infinia.Infrastructure.Data.DataModels.EmployerInfo", "EmployerInfo")
                        .WithMany()
                        .HasForeignKey("EmployerInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infinia.Infrastructure.Data.DataModels.HouselholdInfo", "HouseholdInfo")
                        .WithMany()
                        .HasForeignKey("HouseholdInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infinia.Infrastructure.Data.DataModels.IncomeInfo", "IncomeInfo")
                        .WithMany()
                        .HasForeignKey("IncomeInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infinia.Infrastructure.Data.DataModels.MaritalStatus", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infinia.Infrastructure.Data.DataModels.PropertyStatus", "PropertyStatus")
                        .WithMany()
                        .HasForeignKey("PropertyStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Customer");

                    b.Navigation("Education");

                    b.Navigation("EmployerInfo");

                    b.Navigation("HouseholdInfo");

                    b.Navigation("IncomeInfo");

                    b.Navigation("MaritalStatus");

                    b.Navigation("PropertyStatus");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.Transaction", b =>
                {
                    b.HasOne("Infinia.Infrastructure.Data.DataModels.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Infinia.Infrastructure.Data.DataModels.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Infinia.Infrastructure.Data.DataModels.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infinia.Infrastructure.Data.DataModels.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Infinia.Infrastructure.Data.DataModels.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.Address", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Infinia.Infrastructure.Data.DataModels.Customer", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("LoanApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
